import streamlit as st
import cv2
import numpy as np
from PIL import Image
import time
import mediapipe as mp

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MediaPipe Pose
mp_pose = mp.solutions.pose
pose = mp_pose.Pose(
    min_detection_confidence=0.5,
    min_tracking_confidence=0.5,
    model_complexity=1
)
mp_drawing = mp.solutions.drawing_utils

def analyze_posture(image):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ—Å–∞–Ω–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Ç–æ—á–∫–∞–º–∏ –∏ —Ç–µ–∫—Å—Ç —Å –∞–Ω–∞–ª–∏–∑–æ–º"""
    image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
    results = pose.process(image_rgb)
    
    annotated_image = image.copy()
    if results.pose_landmarks:
        # –†–∏—Å—É–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ç–æ—á–∫–∏ (–±–µ–∑ —Ç–µ–∫—Å—Ç–∞)
        mp_drawing.draw_landmarks(
            annotated_image, 
            results.pose_landmarks, 
            mp_pose.POSE_CONNECTIONS,
            mp_drawing.DrawingSpec(color=(0, 255, 0), thickness=2, circle_radius=2),
            mp_drawing.DrawingSpec(color=(0, 0, 255), thickness=2)
        )
        posture_status = check_posture(results.pose_landmarks, image.shape)
    else:
        posture_status = "–ö–ª—é—á–µ–≤—ã–µ —Ç–æ—á–∫–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã"
    
    return annotated_image, posture_status

def check_posture(landmarks, image_shape):
    h, w, _ = image_shape

    # –ö–ª—é—á–µ–≤—ã–µ —Ç–æ—á–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    left_shoulder = landmarks.landmark[mp_pose.PoseLandmark.LEFT_SHOULDER]
    right_shoulder = landmarks.landmark[mp_pose.PoseLandmark.RIGHT_SHOULDER]
    left_hip = landmarks.landmark[mp_pose.PoseLandmark.LEFT_HIP]
    right_hip = landmarks.landmark[mp_pose.PoseLandmark.RIGHT_HIP]
    left_ear = landmarks.landmark[mp_pose.PoseLandmark.LEFT_EAR]
    right_ear = landmarks.landmark[mp_pose.PoseLandmark.RIGHT_EAR]
    nose = landmarks.landmark[mp_pose.PoseLandmark.NOSE]
    left_elbow = landmarks.landmark[mp_pose.PoseLandmark.LEFT_ELBOW]
    right_elbow = landmarks.landmark[mp_pose.PoseLandmark.RIGHT_ELBOW]
    left_wrist = landmarks.landmark[mp_pose.PoseLandmark.LEFT_WRIST]
    right_wrist = landmarks.landmark[mp_pose.PoseLandmark.RIGHT_WRIST]
    left_knee = landmarks.landmark[mp_pose.PoseLandmark.LEFT_KNEE]
    right_knee = landmarks.landmark[mp_pose.PoseLandmark.RIGHT_KNEE]

    messages = []

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–ª–æ–∂–µ–Ω–∏—è —Ç–µ–ª–∞: —Å–∏–¥–∏—Ç –∏–ª–∏ —Å—Ç–æ–∏—Ç
    # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ –µ—Å–ª–∏ —Ç–∞–∑ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –Ω–∏–∂–µ –ø–ª–µ—á ‚Äî —Å–∏–¥–∏—Ç
    avg_shoulder_y = (left_shoulder.y + right_shoulder.y) / 2
    avg_hip_y = (left_hip.y + right_hip.y) / 2
    sitting = avg_hip_y - avg_shoulder_y > 0.15

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–∫–ª–æ–Ω–∞ –≥–æ–ª–æ–≤—ã –≤–ø–µ—Ä–µ–¥ (—Ç–µ–∫—Å—Ç–æ–≤–∞—è —à–µ—è)
    head_forward = False
    if (left_ear.y > avg_shoulder_y + 0.07 or right_ear.y > avg_shoulder_y + 0.07) and \
       (nose.y > avg_shoulder_y):
        head_forward = True
        messages.append("‚Ä¢ –ì–æ–ª–æ–≤–∞ –Ω–∞–∫–ª–æ–Ω–µ–Ω–∞ –≤–ø–µ—Ä–µ–¥ (—Ç–µ–∫—Å—Ç–æ–≤–∞—è —à–µ—è)")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—Ç—É–ª–æ—Å—Ç–∏ –ø–ª–µ—á
    # –†–∞—Å—Å—á–∏—Ç–∞–µ–º —É–≥–æ–ª –º–µ–∂–¥—É –ø–ª–µ—á–∞–º–∏ –∏ —Ç–∞–∑–æ–º
    shoulder_dx = right_shoulder.x - left_shoulder.x
    shoulder_dy = right_shoulder.y - left_shoulder.y
    hip_dx = right_hip.x - left_hip.x
    hip_dy = right_hip.y - left_hip.y

    shoulder_slope = abs(shoulder_dy)
    hip_slope = abs(hip_dy)

    # –°—É—Ç—É–ª–æ—Å—Ç—å ‚Äî –∫–æ–≥–¥–∞ –ø–ª–µ—á–∏ —Å–¥–≤–∏–Ω—É—Ç—ã –≤–ø–µ—Ä–µ–¥ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ç–∞–∑–∞ –ø–æ X (–ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏)
    shoulders_forward = (left_shoulder.x > left_hip.x + 0.05) or (right_shoulder.x < right_hip.x - 0.05)
    if shoulders_forward:
        messages.append("‚Ä¢ –ü–ª–µ—á–∏ —Å—Å—É—Ç—É–ª–µ–Ω—ã (–æ–∫—Ä—É–≥–ª–µ–Ω—ã –≤–ø–µ—Ä–µ–¥)")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–∫–ª–æ–Ω–∞ —Ç–µ–ª–∞ –≤ —Å—Ç–æ—Ä–æ–Ω—É (–∞—Å–∏–º–º–µ—Ç—Ä–∏—è –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏)
    if shoulder_slope > 0.05:
        messages.append("‚Ä¢ –ü–ª–µ—á–∏ –Ω–µ –Ω–∞ –æ–¥–Ω–æ–º —É—Ä–æ–≤–Ω–µ (–Ω–∞–∫–ª–æ–Ω –≤ —Å—Ç–æ—Ä–æ–Ω—É)")
    if hip_slope > 0.05:
        messages.append("‚Ä¢ –¢–∞–∑ –Ω–µ –Ω–∞ –æ–¥–Ω–æ–º —É—Ä–æ–≤–Ω–µ (–Ω–∞–∫–ª–æ–Ω –≤ —Å—Ç–æ—Ä–æ–Ω—É)")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–∫–ª–æ–Ω–∞ –≥–æ–ª–æ–≤—ã –≤–±–æ–∫ (–Ω–µ—Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —É—à–µ–π –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏)
    ear_diff = abs(left_ear.y - right_ear.y)
    if ear_diff > 0.04:
        messages.append("‚Ä¢ –ì–æ–ª–æ–≤–∞ –Ω–∞–∫–ª–æ–Ω–µ–Ω–∞ –≤ —Å—Ç–æ—Ä–æ–Ω—É")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≥–∏–±–∞ –ª–æ–∫—Ç–µ–π ‚Äî –≤–∞–∂–Ω–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –ø–æ–ª–æ–∂–µ–Ω–∏—è —Ä—É–∫
    def angle_between_points(a, b, c):
        import math
        # —É–≥–æ–ª –≤ –≥—Ä–∞–¥—É—Å–∞—Ö –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏ a-b-c –≤ –ø–ª–æ—Å–∫–æ—Å—Ç–∏ XY
        ba = (a.x - b.x, a.y - b.y)
        bc = (c.x - b.x, c.y - b.y)
        dot_product = ba[0]*bc[0] + ba[1]*bc[1]
        mag_ba = (ba[0]**2 + ba[1]**2)**0.5
        mag_bc = (bc[0]**2 + bc[1]**2)**0.5
        if mag_ba * mag_bc == 0:
            return 0
        cos_angle = dot_product / (mag_ba * mag_bc)
        cos_angle = max(min(cos_angle,1),-1)  # –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω
        angle_rad = math.acos(cos_angle)
        return math.degrees(angle_rad)

    left_elbow_angle = angle_between_points(left_shoulder, left_elbow, left_wrist)
    right_elbow_angle = angle_between_points(right_shoulder, right_elbow, right_wrist)

    # –ï—Å–ª–∏ –ª–æ–∫—Ç–∏ —Å–∏–ª—å–Ω–æ —Å–æ–≥–Ω—É—Ç—ã ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø–æ–∑–∞ –∑–∞ —Ä–∞–±–æ—á–∏–º —Å—Ç–æ–ª–æ–º
    if left_elbow_angle < 60 or right_elbow_angle < 60:
        messages.append("‚Ä¢ –õ–æ–∫—Ç–∏ —Å–∏–ª—å–Ω–æ —Å–æ–≥–Ω—É—Ç—ã (–≤–æ–∑–º–æ–∂–Ω–∞ –Ω–∞–ø—Ä—è–∂–µ–Ω–Ω–æ—Å—Ç—å —Ä—É–∫)")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–µ–Ω–µ–π ‚Äî —Å–æ–≥–Ω—É—Ç—ã –∏–ª–∏ –≤—ã–ø—Ä—è–º–ª–µ–Ω—ã
    # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –ª–æ–∫—Ç—è–º ‚Äî –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å, –µ—Å–ª–∏ –Ω–∞–¥–æ

    # –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if not messages:
        report = [
            f"**–û—Ç–ª–∏—á–Ω–∞—è –æ—Å–∞–Ω–∫–∞ ({'—Å–∏–¥—è' if sitting else '—Å—Ç–æ—è'})!**",
            "–í—Å–µ –∫–ª—é—á–µ–≤—ã–µ —Ç–æ—á–∫–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ–ª–æ–∂–µ–Ω–∏–∏.",
            "\n**–°–æ–≤–µ—Ç:**",
            "‚Ä¢ –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Å–ª–µ–¥–∏—Ç—å –∑–∞ –æ—Å–∞–Ω–∫–æ–π –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è"
        ]
    else:
        report = [
            f"**{'–°–∏–¥—è' if sitting else '–°—Ç–æ—è'} - –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã:**",
            *messages,
            "\n**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**",
            "‚Ä¢ –î–µ—Ä–∂–∏—Ç–µ –≥–æ–ª–æ–≤—É –ø—Ä—è–º–æ, —É—à–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∞–¥ –ø–ª–µ—á–∞–º–∏",
            "‚Ä¢ –û—Ç–≤–µ–¥–∏—Ç–µ –ø–ª–µ—á–∏ –Ω–∞–∑–∞–¥ –∏ –≤–Ω–∏–∑",
            "‚Ä¢ –î–µ—Ä–∂–∏—Ç–µ —Å–ø–∏–Ω—É –ø—Ä—è–º–æ–π, –∏–∑–±–µ–≥–∞–π—Ç–µ –Ω–∞–∫–ª–æ–Ω–æ–≤ –≤ —Å—Ç–æ—Ä–æ–Ω—ã",
            "‚Ä¢ –ü—Ä–∏ —Å–∏–¥–µ–Ω–∏–∏ –æ–ø–∏—Ä–∞–π—Ç–µ—Å—å –Ω–∞ —Å–µ–¥–∞–ª–∏—â–Ω—ã–µ –±—É–≥—Ä—ã"
        ]

    return "\n\n".join(report)

def main():
    st.set_page_config(layout="wide")
    st.title("üì∑ –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –æ—Å–∞–Ω–∫–∏ —Å –≤–µ–±-–∫–∞–º–µ—Ä—ã")
    st.write("–≠—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞—à—É –æ—Å–∞–Ω–∫—É –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")
    
    # –°–æ–∑–¥–∞–µ–º –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.header("–í–∏–¥ —Å –∫–∞–º–µ—Ä—ã")
        run = st.checkbox("–í–∫–ª—é—á–∏—Ç—å –≤–µ–±-–∫–∞–º–µ—Ä—É", value=True)
        FRAME_WINDOW = st.image([])
    
    with col2:
        st.header("–ê–Ω–∞–ª–∏–∑ –æ—Å–∞–Ω–∫–∏")
        status_placeholder = st.empty()
        if not run:
            status_placeholder.markdown("""
                **–û–∂–∏–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –∫–∞–º–µ—Ä—ã...**
                
                –í–∫–ª—é—á–∏—Ç–µ –≤–µ–±-–∫–∞–º–µ—Ä—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ—Å–∞–Ω–∫–∏.
            """)
    
    camera = cv2.VideoCapture(0)
    
    while run:
        _, frame = camera.read()
        frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        
        # –ê–Ω–∞–ª–∏–∑ –æ—Å–∞–Ω–∫–∏
        analyzed_frame, posture_status = analyze_posture(cv2.cvtColor(frame, cv2.COLOR_RGB2BGR))
        analyzed_frame = cv2.cvtColor(analyzed_frame, cv2.COLOR_BGR2RGB)
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –∫–æ–ª–æ–Ω–∫–∞—Ö
        with col1:
            FRAME_WINDOW.image(analyzed_frame)
        
        with col2:
            status_placeholder.markdown(posture_status)
        
        time.sleep(0.1)
    
    camera.release()
    cv2.destroyAllWindows()

if __name__ == "__main__":
    main()