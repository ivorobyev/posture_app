import streamlit as st
import cv2
import time
import mediapipe as mp

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MediaPipe Pose
mp_pose = mp.solutions.pose
pose = mp_pose.Pose(
    min_detection_confidence=0.5,
    min_tracking_confidence=0.5,
    model_complexity=1
)
mp_drawing = mp.solutions.drawing_utils

def analyze_posture(image):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ—Å–∞–Ω–∫—É, —Ä–∏—Å—É–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Ç–æ—á–∫–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —Ç–µ–∫—Å—Ç –∞–Ω–∞–ª–∏–∑–∞"""
    image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
    results = pose.process(image_rgb)

    annotated_image = image.copy()
    if results.pose_landmarks:
        mp_drawing.draw_landmarks(
            annotated_image,
            results.pose_landmarks,
            mp_pose.POSE_CONNECTIONS,
            mp_drawing.DrawingSpec(color=(0, 255, 0), thickness=2, circle_radius=2),
            mp_drawing.DrawingSpec(color=(0, 0, 255), thickness=2)
        )
        posture_status = check_posture(results.pose_landmarks, image.shape)
    else:
        posture_status = "–ö–ª—é—á–µ–≤—ã–µ —Ç–æ—á–∫–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã"

    return annotated_image, posture_status

def check_posture(landmarks, image_shape):
    h, w, _ = image_shape

    left_shoulder = landmarks.landmark[mp_pose.PoseLandmark.LEFT_SHOULDER]
    right_shoulder = landmarks.landmark[mp_pose.PoseLandmark.RIGHT_SHOULDER]
    left_hip = landmarks.landmark[mp_pose.PoseLandmark.LEFT_HIP]
    right_hip = landmarks.landmark[mp_pose.PoseLandmark.RIGHT_HIP]
    left_ear = landmarks.landmark[mp_pose.PoseLandmark.LEFT_EAR]
    right_ear = landmarks.landmark[mp_pose.PoseLandmark.RIGHT_EAR]
    nose = landmarks.landmark[mp_pose.PoseLandmark.NOSE]

    sitting = left_hip.y < left_shoulder.y + 0.1 or right_hip.y < right_shoulder.y + 0.1

    messages = []

    head_forward = (left_ear.y > left_shoulder.y + 0.1 or right_ear.y > right_shoulder.y + 0.1) and \
                   (nose.y > left_shoulder.y or nose.y > right_shoulder.y)
    if head_forward:
        messages.append("‚Ä¢ –ì–æ–ª–æ–≤–∞ –Ω–∞–∫–ª–æ–Ω–µ–Ω–∞ –≤–ø–µ—Ä–µ–¥ (—Ç–µ–∫—Å—Ç–æ–≤–∞—è —à–µ—è)")

    shoulders_rounded = left_shoulder.x > left_hip.x + 0.05 or right_shoulder.x < right_hip.x - 0.05
    if shoulders_rounded:
        messages.append("‚Ä¢ –ü–ª–µ—á–∏ —Å—Å—É—Ç—É–ª–µ–Ω—ã (–æ–∫—Ä—É–≥–ª–µ–Ω—ã –≤–ø–µ—Ä–µ–¥)")

    shoulder_diff = abs(left_shoulder.y - right_shoulder.y)
    hip_diff = abs(left_hip.y - right_hip.y)
    if shoulder_diff > 0.05 or hip_diff > 0.05:
        messages.append("‚Ä¢ –ù–∞–∫–ª–æ–Ω –≤ —Å—Ç–æ—Ä–æ–Ω—É (–Ω–µ—Å–∏–º–º–µ—Ç—Ä–∏—á–Ω–∞—è –æ—Å–∞–Ω–∫–∞)")

    if sitting and (left_hip.y < left_shoulder.y + 0.15 or right_hip.y < right_shoulder.y + 0.15):
        messages.append("‚Ä¢ –¢–∞–∑ –Ω–∞–∫–ª–æ–Ω–µ–Ω –≤–ø–µ—Ä–µ–¥ (—Å–∏–¥—è)")

    if messages:
        report = [
            f"**{'–°–∏–¥—è' if sitting else '–°—Ç–æ—è'} - –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã:**",
            *messages,
            "\n**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**",
            "‚Ä¢ –î–µ—Ä–∂–∏—Ç–µ –≥–æ–ª–æ–≤—É –ø—Ä—è–º–æ, —É—à–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∞–¥ –ø–ª–µ—á–∞–º–∏",
            "‚Ä¢ –û—Ç–≤–µ–¥–∏—Ç–µ –ø–ª–µ—á–∏ –Ω–∞–∑–∞–¥ –∏ –≤–Ω–∏–∑",
            "‚Ä¢ –î–µ—Ä–∂–∏—Ç–µ —Å–ø–∏–Ω—É –ø—Ä—è–º–æ–π, –∏–∑–±–µ–≥–∞–π—Ç–µ –Ω–∞–∫–ª–æ–Ω–æ–≤ –≤ —Å—Ç–æ—Ä–æ–Ω—ã",
            "‚Ä¢ –ü—Ä–∏ —Å–∏–¥–µ–Ω–∏–∏ –æ–ø–∏—Ä–∞–π—Ç–µ—Å—å –Ω–∞ —Å–µ–¥–∞–ª–∏—â–Ω—ã–µ –±—É–≥—Ä—ã"
        ]
    else:
        report = [
            f"**–û—Ç–ª–∏—á–Ω–∞—è –æ—Å–∞–Ω–∫–∞ ({'—Å–∏–¥—è' if sitting else '—Å—Ç–æ—è'})!**",
            "–í—Å–µ –∫–ª—é—á–µ–≤—ã–µ —Ç–æ—á–∫–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ–ª–æ–∂–µ–Ω–∏–∏.",
            "\n**–°–æ–≤–µ—Ç:**",
            "‚Ä¢ –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Å–ª–µ–¥–∏—Ç—å –∑–∞ –æ—Å–∞–Ω–∫–æ–π –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è"
        ]

    return "\n\n".join(report)

def main():
    st.set_page_config(layout="wide")
    st.title("üì∑ –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –æ—Å–∞–Ω–∫–∏ —Å –≤–µ–±-–∫–∞–º–µ—Ä—ã")
    st.write("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞—à—É –æ—Å–∞–Ω–∫—É –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")

    col1, col2 = st.columns([2, 1])

    with col1:
        st.header("–í–∏–¥ —Å –∫–∞–º–µ—Ä—ã")
        run = st.checkbox("–í–∫–ª—é—á–∏—Ç—å –≤–µ–±-–∫–∞–º–µ—Ä—É", value=True, key="camera_checkbox")
        frame_window = st.image([])

    with col2:
        st.header("–ê–Ω–∞–ª–∏–∑ –æ—Å–∞–Ω–∫–∏")
        status_placeholder = st.empty()

    camera = cv2.VideoCapture(0)

    while run:
        ret, frame = camera.read()
        if not ret:
            status_placeholder.markdown("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞–¥—Ä —Å –∫–∞–º–µ—Ä—ã")
            break

        annotated_frame, posture_text = analyze_posture(frame)
        annotated_frame_rgb = cv2.cvtColor(annotated_frame, cv2.COLOR_BGR2RGB)

        frame_window.image(annotated_frame_rgb)
        status_placeholder.markdown(posture_text)

        time.sleep(0.05)

    camera.release()
    cv2.destroyAllWindows()

if __name__ == "__main__":
    main()