import streamlit as st
import av
import numpy as np
from streamlit_webrtc import webrtc_streamer, VideoProcessorBase, WebRtcMode
import mediapipe as mp
from PIL import Image, ImageDraw

mp_pose = mp.solutions.pose
mp_drawing = mp.solutions.drawing_utils

class MediaPipePostureAnalyzer(VideoProcessorBase):
    def __init__(self):
        self.status = "–û–∂–∏–¥–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞..."
        self.pose = mp_pose.Pose(min_detection_confidence=0.5, min_tracking_confidence=0.5)

    def draw_landmarks(self, image, landmarks, connections):
        # –†–∏—Å—É–µ–º –ª–∏–Ω–∏–∏ –∏ —Ç–æ—á–∫–∏ –Ω–∞ PIL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
        draw = ImageDraw.Draw(image)
        w, h = image.size

        # –†–∏—Å—É–µ–º –ª–∏–Ω–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        for connection in connections:
            start_idx, end_idx = connection
            start = landmarks[start_idx]
            end = landmarks[end_idx]
            if start.visibility < 0.5 or end.visibility < 0.5:
                continue
            draw.line(
                [(start.x * w, start.y * h), (end.x * w, end.y * h)],
                fill=(0, 255, 0), width=3
            )
        # –†–∏—Å—É–µ–º —Ç–æ—á–∫–∏
        for lm in landmarks:
            if lm.visibility < 0.5:
                continue
            x, y = lm.x * w, lm.y * h
            r = 5
            draw.ellipse((x - r, y - r, x + r, y + r), fill=(255, 0, 0))

    def recv(self, frame: av.VideoFrame) -> av.VideoFrame:
        img = frame.to_ndarray(format="rgb24")
        img_pil = Image.fromarray(img)

        results = self.pose.process(img)
        if not results.pose_landmarks:
            self.status = "üôà –õ–∏—Ü–æ/–ø–ª–µ—á–∏ –Ω–µ –≤–∏–¥–Ω—ã"
            return av.VideoFrame.from_ndarray(np.array(img_pil), format="rgb24")

        self.draw_landmarks(img_pil, results.pose_landmarks.landmark, mp_pose.POSE_CONNECTIONS)

        # –ê–Ω–∞–ª–∏–∑ –æ—Å–∞–Ω–∫–∏
        lm = results.pose_landmarks.landmark
        w, h = img_pil.size

        def get_point(name):
            pt = getattr(mp_pose.PoseLandmark, name)
            lm_point = lm[pt]
            return None if lm_point.visibility < 0.5 else (lm_point.x * w, lm_point.y * h)

        nose = get_point("NOSE")
        left_shoulder = get_point("LEFT_SHOULDER")
        right_shoulder = get_point("RIGHT_SHOULDER")

        messages = []

        if nose and left_shoulder and right_shoulder:
            avg_sh_y = (left_shoulder[1] + right_shoulder[1]) / 2
            head_tilt_threshold = 20  # pixels

            if nose[1] > avg_sh_y + head_tilt_threshold:
                messages.append("‚Ä¢ –ì–æ–ª–æ–≤–∞ –Ω–∞–∫–ª–æ–Ω–µ–Ω–∞ –≤–ø–µ—Ä—ë–¥")

            shoulder_diff = abs(left_shoulder[1] - right_shoulder[1])
            shoulder_threshold = 15  # pixels

            if shoulder_diff > shoulder_threshold:
                messages.append("‚Ä¢ –ê—Å–∏–º–º–µ—Ç—Ä–∏—è –ø–ª–µ—á")

        self.status = (
            "**–û—Å–∞–Ω–∫–∞ —Ö–æ—Ä–æ—à–∞—è!**\n–í—ã —Å–∏–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ."
            if not messages
            else "**–ü—Ä–æ–±–ª–µ–º—ã —Å –æ—Å–∞–Ω–∫–æ–π:**\n" + "\n".join(messages)
        )

        return av.VideoFrame.from_ndarray(np.array(img_pil), format="rgb24")


def main():
    st.set_page_config(layout="wide")
    st.title("üßç –ê–Ω–∞–ª–∏–∑ –æ—Å–∞–Ω–∫–∏ —Å MediaPipe –±–µ–∑ OpenCV")

    col1, col2 = st.columns([1, 2])

    with col1:
        st.header("–í–∏–¥–µ–æ —Å –∫–∞–º–µ—Ä—ã")
        webrtc_ctx = webrtc_streamer(
            key="mediapipe-pose-stream",
            mode=WebRtcMode.SENDRECV,
            video_processor_factory=MediaPipePostureAnalyzer,
            media_stream_constraints={"video": True, "audio": False},
            async_processing=True,
        )

    with col2:
        st.header("–ê–Ω–∞–ª–∏–∑ –æ—Å–∞–Ω–∫–∏")
        info_box = st.empty()
        if webrtc_ctx.video_processor:
            info_box.markdown(f"""
                <div style='background:#f0f2f6;padding:20px;border-radius:10px; white-space: pre-line; font-family: monospace;'>
                {webrtc_ctx.video_processor.status}
                </div>
            """, unsafe_allow_html=True)

        st.subheader("–°–æ–≤–µ—Ç—ã –¥–ª—è –∑–¥–æ—Ä–æ–≤–æ–π –æ—Å–∞–Ω–∫–∏:")
        st.markdown("""
        - –ú–æ–Ω–∏—Ç–æ—Ä –Ω–∞ —É—Ä–æ–≤–Ω–µ –≥–ª–∞–∑  
        - –°–ø–∏–Ω–∞ —Ä–æ–≤–Ω–∞—è  
        - –ü–ª–µ—á–∏ —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω—ã  
        - –î–µ–ª–∞–π—Ç–µ –ø–µ—Ä–µ—Ä—ã–≤—ã –∫–∞–∂–¥—ã–π —á–∞—Å
        """)

if __name__ == "__main__":
    main()